(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{367:function(t,s,a){"use strict";a.r(s);var n=a(25),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_8-布隆过滤器-bloom-filter-的原理和实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-布隆过滤器-bloom-filter-的原理和实现"}},[t._v("#")]),t._v(" 8. 布隆过滤器(Bloom Filter)的原理和实现")]),t._v(" "),a("h2",{attrs:{id:"什么情况下需要布隆过滤器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么情况下需要布隆过滤器"}},[t._v("#")]),t._v(" 什么情况下需要布隆过滤器？")]),t._v(" "),a("p",[t._v("先来看几个比较常见的例子")]),t._v(" "),a("ul",[a("li",[t._v("字处理软件中，需要检查一个英语单词是否拼写正确")]),t._v(" "),a("li",[t._v("在 FBI，一个嫌疑人的名字是否已经在嫌疑名单上")]),t._v(" "),a("li",[t._v("在网络爬虫里，一个网址是否被访问过")]),t._v(" "),a("li",[t._v("yahoo, gmail等邮箱垃圾邮件过滤功能")])]),t._v(" "),a("p",[t._v("这几个例子有一个共同的特点： 如何判断一个元素是否存在一个集合中？")]),t._v(" "),a("h2",{attrs:{id:"常规思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常规思路"}},[t._v("#")]),t._v(" 常规思路")]),t._v(" "),a("ul",[a("li",[t._v("数组")]),t._v(" "),a("li",[t._v("链表")]),t._v(" "),a("li",[t._v("树、平衡二叉树、Trie")]),t._v(" "),a("li",[t._v("Map (红黑树)")]),t._v(" "),a("li",[t._v("哈希表")])]),t._v(" "),a("p",[t._v("虽然上面描述的这几种数据结构配合常见的排序、二分搜索可以快速高效的处理绝大部分判断元素是否存在集合中的需求。但是当集合里面的元素数量足够大，如果有500万条记录甚至1亿条记录呢？这个时候常规的数据结构的问题就凸显出来了。数组、链表、树等数据结构会存储元素的内容，一旦数据量过大，消耗的内存也会呈现线性增长，最终达到瓶颈。有的同学可能会问，哈希表不是效率很高吗？查询效率可以达到O(1)。但是哈希表需要消耗的内存依然很高。使用哈希表存储一亿 个垃圾 email 地址的消耗？哈希表的做法：首先，哈希函数将一个email地址映射成8字节信息指纹；考虑到哈希表存储效率通常小于50%（哈希冲突）；因此消耗的内存：8 * 2 * 1亿 字节 = 1.6G 内存，普通计算机是无法提供如此大的内存。这个时候，布隆过滤器（Bloom Filter）就应运而生。在继续介绍布隆过滤器的原理时，先讲解下关于哈希函数的预备知识。")]),t._v(" "),a("h2",{attrs:{id:"哈希函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#哈希函数"}},[t._v("#")]),t._v(" 哈希函数")]),t._v(" "),a("p",[t._v("哈希函数的概念是：将任意大小的数据转换成特定大小的数据的函数，转换后的数据称为哈希值或哈希编码。下面是一幅示意图：")]),t._v(" "),a("p",[t._v("可以明显的看到，原始数据经过哈希函数的映射后称为了一个个的哈希编码，数据得到压缩。哈希函数是实现哈希表和布隆过滤器的基础。")]),t._v(" "),a("h2",{attrs:{id:"布隆过滤器介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#布隆过滤器介绍"}},[t._v("#")]),t._v(" 布隆过滤器介绍")]),t._v(" "),a("ul",[a("li",[t._v("巴顿.布隆于一九七零年提出")]),t._v(" "),a("li",[t._v("一个很长的二进制向量 （位数组）")]),t._v(" "),a("li",[t._v("一系列随机函数 (哈希)")]),t._v(" "),a("li",[t._v("空间效率和查询效率高")]),t._v(" "),a("li",[t._v("有一定的误判率（哈希表是精确匹配）")])]),t._v(" "),a("h2",{attrs:{id:"布隆过滤器原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#布隆过滤器原理"}},[t._v("#")]),t._v(" 布隆过滤器原理")]),t._v(" "),a("p",[t._v("布隆过滤器（Bloom Filter）的核心实现是一个超大的位数组和几个哈希函数。假设位数组的长度为m，哈希函数的个数为k")]),t._v(" "),a("p",[t._v("以上图为例，具体的操作流程：假设集合里面有3个元素{x, y, z}，哈希函数的个数为3。首先将位数组进行初始化，将里面每个位都设置位0。对于集合里面的每一个元素，将元素依次通过3个哈希函数进行映射，每次映射都会产生一个哈希值，这个值对应位数组上面的一个点，然后将位数组对应的位置标记为1。查询W元素是否存在集合中的时候，同样的方法将W通过哈希映射到位数组上的3个点。如果3个点的其中有一个点不为1，则可以判断该元素一定不存在集合中。反之，如果3个点都为1，则该元素可能存在集合中。注意：此处不能判断该元素是否一定存在集合中，可能存在一定的误判率。可以从图中可以看到：假设某个元素通过映射对应下标为4，5，6这3个点。虽然这3个点都为1，但是很明显这3个点是不同元素经过哈希得到的位置，因此这种情况说明元素虽然不在集合中，也可能对应的都是1，这是误判率存在的原因。")]),t._v(" "),a("h2",{attrs:{id:"布隆过滤器添加元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#布隆过滤器添加元素"}},[t._v("#")]),t._v(" 布隆过滤器添加元素")]),t._v(" "),a("ul",[a("li",[t._v("将要添加的元素给k个哈希函数")]),t._v(" "),a("li",[t._v("得到对应于位数组上的k个位置")]),t._v(" "),a("li",[t._v("将这k个位置设为1")])]),t._v(" "),a("h2",{attrs:{id:"布隆过滤器查询元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#布隆过滤器查询元素"}},[t._v("#")]),t._v(" 布隆过滤器查询元素")]),t._v(" "),a("ul",[a("li",[t._v("将要查询的元素给k个哈希函数")]),t._v(" "),a("li",[t._v("得到对应于位数组上的k个位置")]),t._v(" "),a("li",[t._v("如果k个位置有一个为0，则肯定不在集合中")]),t._v(" "),a("li",[t._v("如果k个位置全部为1，则可能在集合中")])]),t._v(" "),a("h2",{attrs:{id:"布隆过滤器实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#布隆过滤器实现"}},[t._v("#")]),t._v(" 布隆过滤器实现")]),t._v(" "),a("p",[t._v("下面给出python的实现，使用murmurhash算法")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" mmh3\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" bitarray "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" bitarray\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# zhihu_crawler.bloom_filter")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Implement a simple bloom filter with murmurhash algorithm.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Bloom filter is used to check wether an element exists in a collection, and it has a good performance in big data situation.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# It may has positive rate depend on hash functions and elements count.")]),t._v("\n\n\n\nBIT_SIZE "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5000000")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BloomFilter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Initialize bloom filter, set size and all bits to 0")]),t._v("\n        bit_array "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" bitarray"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BIT_SIZE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        bit_array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("setall"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bit_array "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" bit_array\n        \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Add a url, and set points in bitarray to 1 (Points count is equal to hash funcs count.)")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Here use 7 hash functions.")]),t._v("\n        point_list "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_postions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" point_list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bit_array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("contains")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Check if a url is in a collection")]),t._v("\n        point_list "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get_postions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" point_list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bit_array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    \n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_postions")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Get points positions in bit vector.")]),t._v("\n        point1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mmh3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("41")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" BIT_SIZE\n        point2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mmh3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" BIT_SIZE\n        point3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mmh3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("43")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" BIT_SIZE\n        point4 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mmh3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("44")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" BIT_SIZE\n        point5 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mmh3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("45")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" BIT_SIZE\n        point6 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mmh3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("46")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" BIT_SIZE\n        point7 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mmh3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("47")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" BIT_SIZE\n\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("point1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" point2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" point3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" point4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" point5"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" point6"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" point7"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("p",[a("a",{attrs:{href:"https://github.com/cpselvis/zhihu-crawler/blob/master/bloom_filter.py",target:"_blank",rel:"noopener noreferrer"}},[t._v("布隆过滤器的原理和实现"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://blog.csdn.net/tianyaleixiaowu/article/details/74721877",target:"_blank",rel:"noopener noreferrer"}},[t._v("使用布隆过滤器解决缓存击穿、垃圾邮件识别、集合判重"),a("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=r.exports}}]);