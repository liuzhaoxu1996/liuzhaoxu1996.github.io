(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{389:function(t,s,a){"use strict";a.r(s);var e=a(25),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_5-引用类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-引用类型"}},[t._v("#")]),t._v(" 5. 引用类型")]),t._v(" "),a("h2",{attrs:{id:"_5-1-object类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-object类型"}},[t._v("#")]),t._v(" 5.1 Object类型")]),t._v(" "),a("ul",[a("li",[t._v("创建对象的两种方式\n"),a("ul",[a("li",[t._v("创建对象实例: new Object()")]),t._v(" "),a("li",[t._v("对象字面量: "),a("code",[t._v("{}")])])])])]),t._v(" "),a("h2",{attrs:{id:"_5-2-array类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-array类型"}},[t._v("#")]),t._v(" 5.2 Array类型")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("创建数组的方式")]),t._v(" "),a("ul",[a("li",[t._v("new Array()")]),t._v(" "),a("li",[t._v("数组字面量 "),a("code",[t._v("[]")])])])]),t._v(" "),a("li",[a("p",[t._v("将数组的length属性进行修改, 如果length值小于数组长度, 则会把多余的移除, 如果length值大于数组长度, 会使用undefined补充")])]),t._v(" "),a("li",[a("p",[t._v("检测数组")]),t._v(" "),a("ul",[a("li",[t._v("instanceOf")]),t._v(" "),a("li",[t._v("Array.isArray()")])])]),t._v(" "),a("li",[a("p",[t._v("数组的转换方法")]),t._v(" "),a("ul",[a("li",[t._v("toString(): 会按照"),a("code",[t._v(",")]),t._v("进行拼接成字符串返回")]),t._v(" "),a("li",[t._v("valueOf(): 返回的是数组")])])]),t._v(" "),a("li",[a("p",[t._v("数组方法")]),t._v(" "),a("ul",[a("li",[t._v("join()")]),t._v(" "),a("li",[t._v("push()")]),t._v(" "),a("li",[t._v("pop()")]),t._v(" "),a("li",[t._v("shift()")]),t._v(" "),a("li",[t._v("unshift()")]),t._v(" "),a("li",[t._v("reverse()")]),t._v(" "),a("li",[t._v("sort(): sort方法只会比较字符串")]),t._v(" "),a("li",[t._v("concat(): 返回新数组")]),t._v(" "),a("li",[t._v("slice(): 返回新数组")]),t._v(" "),a("li",[t._v("splice(): 修改原数组")]),t._v(" "),a("li",[t._v("indexOf()")]),t._v(" "),a("li",[t._v("lastIndexOf()")]),t._v(" "),a("li",[t._v("every()")]),t._v(" "),a("li",[t._v("filter()")]),t._v(" "),a("li",[t._v("forEach()")]),t._v(" "),a("li",[t._v("map()")]),t._v(" "),a("li",[t._v("some()")]),t._v(" "),a("li",[t._v("reduce()")]),t._v(" "),a("li",[t._v("reduceRight()")])])]),t._v(" "),a("li",[a("p",[t._v("函数名实际上也是一个指向函数对象的指针")])]),t._v(" "),a("li",[a("p",[t._v("JavaScript函数没有重载, 相同命名的函数, 后者会覆盖前者")])]),t._v(" "),a("li",[a("p",[t._v("函数声明和函数表达式的区别: 函数声明有函数声明提升的过程")])]),t._v(" "),a("li",[a("p",[t._v("函数内部属性:")]),t._v(" "),a("ul",[a("li",[t._v("arguments")]),t._v(" "),a("li",[t._v("this")])])]),t._v(" "),a("li",[a("p",[t._v("函数属性和方法:")]),t._v(" "),a("ul",[a("li",[t._v("length: 参数的个数")]),t._v(" "),a("li",[t._v("prototype: 内部属性不可使用for...in枚举")]),t._v(" "),a("li",[t._v("apply: 天生就有的, 不是继承来的, 第二参数可以是数组也可以是arguments")]),t._v(" "),a("li",[t._v("call: 天生就有的, 不是继承来的")])])]),t._v(" "),a("li",[a("p",[t._v("apply和call真正的作用是扩充函数作用域")])]),t._v(" "),a("li",[a("p",[t._v("基本包装类型:")]),t._v(" "),a("ul",[a("li",[t._v("String()")]),t._v(" "),a("li",[t._v("Boolean()")]),t._v(" "),a("li",[t._v("String()")])])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'some text'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("subString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正常情况下, str是基本类型, 没有subString()方法, 但当读取基本类型的值时, 会自动为字符串进行包装类, 一旦执行完毕, 会立即销毁")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// var str = new String('some text');")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// var str2 = s1.subString(2);")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// str = null;")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 同理 Boolean() 和 Number()")]),t._v("\n")])])]),a("ul",[a("li",[t._v("所有基本类型的对象在转换为bool类型时都是true")])]),t._v(" "),a("h2",{attrs:{id:"_5-4-regexp类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-regexp类型"}},[t._v("#")]),t._v(" 5.4 RegExp类型")]),t._v(" "),a("ul",[a("li",[t._v("(1)创建一个正则表达式")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" expression "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("pattern"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("flags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[a("p",[t._v("(2) flags有3个标志")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("g")]),t._v(": 全局模式, 即模式将被应用于所有字符串, 而非在发现第一个匹配项时立即停止;")]),t._v(" "),a("li",[a("code",[t._v("i")]),t._v(": 不区分大小写模式, 即在确定匹配项时忽略模式与字符串的大小写;")]),t._v(" "),a("li",[a("code",[t._v("m")]),t._v(": 多行模式, 即在到达一行文本末尾时还会继续查找下一行中是否存在与模式匹配的项")])])]),t._v(" "),a("li",[a("p",[t._v("(3) 量词")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("n+")]),t._v(": 表示至少有一个前导字符n, 前导字符是符号前面的一个字符")]),t._v(" "),a("li",[a("code",[t._v("n*")]),t._v(": 表示前导字符n个数不限")]),t._v(" "),a("li",[a("code",[t._v("n?")]),t._v(": 表示0或1个前导字符n")]),t._v(" "),a("li",[a("code",[t._v("n{X}")]),t._v(": 表示包含X个n的序列的字符串")]),t._v(" "),a("li",[a("code",[t._v("n{X|Y}")]),t._v(": 表示包含X到Y个n的序列的字符串, 包含X和Y个")]),t._v(" "),a("li",[a("code",[t._v("n{X,}")]),t._v(": 表示包含至少X个n的序列的字符串")]),t._v(" "),a("li",[a("code",[t._v("n$")]),t._v(": 匹配任何结尾为n的字符串, 从末尾开始匹配")]),t._v(" "),a("li",[a("code",[t._v("^n")]),t._v(": 匹配任何开头为n的字符串")]),t._v(" "),a("li",[a("code",[t._v("^n$")]),t._v(": 表示只匹配字符串n, 也就是匹配整个字符串")])]),t._v(" "),a("p",[t._v("例如:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'php phhhhp pp phhp'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("ph+p")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["php", "phhhhp", "phhp"]')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("ph*p")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["php", "phhhhp", "pp", "phhp"]')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("ph?p")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["php", "pp"]')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("aa")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// null")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("ph{2}p")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["phhp"]')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("ph{2,}p")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["phhhhp", "phhp"]')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("ph{2,4}p")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["phhhhp", "phhp"]')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^php")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["php"]')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^php$")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["php"]')]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("(4)元字符")]),t._v(" "),a("ul",[a("li",[a("code",[t._v(".")]),t._v(": 表示单个字符, 表示任意字符, 除了换行和换行符")]),t._v(" "),a("li",[a("code",[t._v(".*")]),t._v(": 表示任意字符串(0个或多个任意字符, 除了换行和行结束符)")]),t._v(" "),a("li",[a("code",[t._v("\\w")]),t._v(": 匹配任意数字, 字母, 下划线")]),t._v(" "),a("li",[a("code",[t._v("\\W")]),t._v(": 匹配任何非数字, 非字母, 非下划线")]),t._v(" "),a("li",[a("code",[t._v("\\d")]),t._v(": 查找数字")]),t._v(" "),a("li",[a("code",[t._v("\\D")]),t._v(": 查找非数字字符")]),t._v(" "),a("li",[a("code",[t._v("\\s")]),t._v(": 查找空白字符")]),t._v(" "),a("li",[a("code",[t._v("\\S")]),t._v(": 查找非空白字符")]),t._v(" "),a("li",[a("code",[t._v("\\b")]),t._v(": 匹配单词边界")]),t._v(" "),a("li",[a("code",[t._v("\\B")]),t._v(": 匹配非单词边界")]),t._v(" "),a("li",[a("code",[t._v("\\n")]),t._v(": 查找换行符")]),t._v(" "),a("li",[a("code",[t._v("\\r")]),t._v(": 查找回车符")]),t._v(" "),a("li",[a("code",[t._v("\\t")]),t._v(": 查找制表符")])])]),t._v(" "),a("li",[a("p",[t._v("(5) 方括号\n方括号表示一个范围, 也称为字符簇")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("[abc]")]),t._v(" 查找方括号之内的任何字符")]),t._v(" "),a("li",[a("code",[t._v("[^abc]")]),t._v(" 查找任何不在方括号之间的字符 (方括号中^表示取反)")]),t._v(" "),a("li",[a("code",[t._v("[0-9]")]),t._v(" 查找任何从0-9的数字, 表示一个字符")]),t._v(" "),a("li",[a("code",[t._v("[a-z]")]),t._v(" 查找任何从小写a到z的字符")]),t._v(" "),a("li",[a("code",[t._v("[A-Z]")]),t._v(" 查找任何从大写a到z的字符")]),t._v(" "),a("li",[a("code",[t._v("[A-z]")]),t._v(" 查找任何从大写A到小写z的字符, 包括下划线")]),t._v(" "),a("li",[a("code",[t._v("[5-8]")]),t._v(" 查找5-8的字符")]),t._v(" "),a("li",[a("code",[t._v("(red)|(blue)|(green)")]),t._v(" 查找任何指定的选项")])])]),t._v(" "),a("li",[a("p",[t._v("(6) 捕获和引用\n先用小括号"),a("code",[t._v("()")]),t._v("捕获, 然后用"),a("code",[t._v("\\1")]),t._v("引用")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("\\1")]),t._v(": 表示引用第1个小括号里捕获的值")]),t._v(" "),a("li",[a("code",[t._v("\\2")]),t._v(": 表示引用第2个小括号里捕获的值")]),t._v(" "),a("li",[a("code",[t._v("(?:)")]),t._v(": 禁止引用")])])]),t._v(" "),a("li",[a("p",[t._v("(7) 匹配中文")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("[4E00-9FA5]")]),t._v(": 中文编码从"),a("code",[t._v("4E00")]),t._v("开始, 到"),a("code",[t._v("9FA5")]),t._v("结束")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello 中国'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("[\\u4e00-\\u9fa5]")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ['中', '国']")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("(8) 环视(断言/零宽断言)")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("regexp(?=n)")]),t._v(": 匹配任何其后紧接指定字符串n的字符串")]),t._v(" "),a("li",[a("code",[t._v("regexp(?!n)")]),t._v(":匹配任何其后没有紧接指定字符串n的字符串")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 有一个字符串是"abcdacd", 从里面查找a, 并且是其后紧接b的a')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("a(?=b)")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 有一个字符串是"abcdacd", 从里面查找a, 且其后不是紧接b的a')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("a(?!b)")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 查询连续的字母, 要求字母的后面必须是数字")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'php7 esnext hello中国'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("[a-zA-Z]+(?=\\d|[\\u4e00-\\u9fa5])")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["php", "hello"]')]),t._v("\n")])])]),a("ul",[a("li",[a("code",[t._v("(?!B)regexp")]),t._v(": 前置的(?!B)只是对后面数据的一个限定, 从而达到过滤匹配的效果")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 表示一个字符串可以由数字字母组成, 但不能全是数字")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'12312312afarf'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(?!^\\d+$)^[0-9a-zA-Z]+$")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])]),t._v(" "),a("h3",{attrs:{id:"_5-4-1-regexp实例属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-1-regexp实例属性"}},[t._v("#")]),t._v(" 5.4.1 RegExp实例属性")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("global")]),t._v(": 是否设置了"),a("code",[t._v("g")]),t._v("标志")]),t._v(" "),a("li",[a("code",[t._v("ignoreCase")]),t._v(": 是否设置了"),a("code",[t._v("i")]),t._v("标志")]),t._v(" "),a("li",[a("code",[t._v("multiline")]),t._v(": 是否设置了"),a("code",[t._v("m")]),t._v("标志")]),t._v(" "),a("li",[a("code",[t._v("source")]),t._v(": 正则表达式的字符串表示")]),t._v(" "),a("li",[a("code",[t._v("lastIndex")]),t._v(": 开始搜索下一个匹配项的字符位置, 从0算起")])]),t._v(" "),a("h3",{attrs:{id:"_5-4-2-regexp实例方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-2-regexp实例方法"}},[t._v("#")]),t._v(" 5.4.2 RegExp实例方法")]),t._v(" "),a("ul",[a("li",[t._v("exec(): 返回包含第一个匹配项的数组")]),t._v(" "),a("li",[t._v("test(): 检测目标字符串和正则表达式是否匹配, 如果匹配返回true, 不匹配返回false")]),t._v(" "),a("li",[t._v("valueOf(): 返回正则表达式本身")]),t._v(" "),a("li",[t._v("toString(): 返回正则表达式字面量形式")]),t._v(" "),a("li",[t._v("toLocalString(): 返回正则表达式字面量形式")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("面试题:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 表示一个字符串可以由数字字母组成, 但不能全是数字")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'今今今今今今今今今今今今晚上吃吃吃吃吃鸡鸡鸡鸡'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("([\\u4e00-\\u9fa5])\\1+")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'$1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),a("h2",{attrs:{id:"_5-6-2-number类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-6-2-number类型"}},[t._v("#")]),t._v(" 5.6.2 Number类型")]),t._v(" "),a("ul",[a("li",[t._v("创建Number对象")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" numberObj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[a("p",[t._v("Number类型也重写了valueOf(), toLocaleString(), toString()")]),t._v(" "),a("ul",[a("li",[t._v("valueOf()返回基本类型的数值")]),t._v(" "),a("li",[t._v("toString(n)返回n进制数值的字符串形式")])])]),t._v(" "),a("li",[a("p",[t._v("Number类型还提供了将数值格式化为字符串的方法")]),t._v(" "),a("ul",[a("li",[t._v("toFixed(n) 保留小数点后n位")])])]),t._v(" "),a("li",[a("p",[t._v("使用 new 调用的基本包装类型的构造函数, 与直接调用同名的转型函数式不一样的")])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"25"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" number "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//转型函数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//"number"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 构造函数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"_5-6-3-string类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-6-3-string类型"}},[t._v("#")]),t._v(" 5.6.3 String类型")]),t._v(" "),a("p",[t._v("String类型是字符串的对象包装类型, 可以通过"),a("code",[t._v("new String()")]),t._v("来构建")]),t._v(" "),a("ul",[a("li",[t._v("String 类型的属性和方法\n"),a("ul",[a("li",[t._v("length")]),t._v(" "),a("li",[t._v("charAt(1) 返回当前位置的字符")]),t._v(" "),a("li",[t._v("charCodeAt(1) 返回对应位置的字符编码")]),t._v(" "),a("li",[t._v("fromCharCodeAt() 接受一个或多个编码字符, 然后拼接成字符串, 与charCodeAt()相反")]),t._v(" "),a("li",[t._v("concat()")]),t._v(" "),a("li",[t._v("slice()")]),t._v(" "),a("li",[t._v("split()")]),t._v(" "),a("li",[t._v("subStr()")]),t._v(" "),a("li",[t._v("subString()")]),t._v(" "),a("li",[t._v("indexOf()")]),t._v(" "),a("li",[t._v("lastIndexOf()")]),t._v(" "),a("li",[t._v("trim()")]),t._v(" "),a("li",[t._v("toUpperCase()")]),t._v(" "),a("li",[t._v("toLowerCase()")]),t._v(" "),a("li",[t._v("replace()")]),t._v(" "),a("li",[t._v("search()")]),t._v(" "),a("li",[t._v("match()")])])])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("还可以通过`[]`来访问某个字符")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'12312'")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),a("h2",{attrs:{id:"_5-7-1-global对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-7-1-global对象"}},[t._v("#")]),t._v(" 5.7.1 Global对象")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Global(全局)对象是不存在的(浏览器中是window代替), 它不存在任何其他对象的属性和方法, 最终都是它的属性和方法,所谓全局作用域定义的属性和函数, 都是Global对象的属性")])]),t._v(" "),a("li",[a("p",[t._v("Global对象的方法")]),t._v(" "),a("ul",[a("li",[t._v("isNaN()")]),t._v(" "),a("li",[t._v("isFinite()")]),t._v(" "),a("li",[t._v("parseInt()")]),t._v(" "),a("li",[t._v("parseFloat()")]),t._v(" "),a("li",[t._v("encodeURI()")]),t._v(" "),a("li",[t._v("encodeURIComponent()")]),t._v(" "),a("li",[t._v("decodeURI()")]),t._v(" "),a("li",[t._v("decodeURIComponent()")])])]),t._v(" "),a("li",[a("p",[t._v("encodeURI()与encodeURIComponent()区别:")]),t._v(" "),a("ul",[a("li",[t._v("encodeURI()不会对本身属于URI的特殊字符进行编码, 只会对空格进行编码")]),t._v(" "),a("li",[t._v("encodeURIComponent()则会对所有的特殊字符进行编码")])])]),t._v(" "),a("li",[a("p",[t._v("eval()中创建的任何变量或者函数都不会被提升")])])]),t._v(" "),a("h2",{attrs:{id:"_5-7-2-math对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-7-2-math对象"}},[t._v("#")]),t._v(" 5.7.2 Math对象")]),t._v(" "),a("ul",[a("li",[t._v("Math对象的方法\n"),a("ul",[a("li",[t._v("max()")]),t._v(" "),a("li",[t._v("min()")]),t._v(" "),a("li",[t._v("ceil()")]),t._v(" "),a("li",[t._v("floor()")]),t._v(" "),a("li",[t._v("round()")]),t._v(" "),a("li",[t._v("random()")])])])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("找出数组中最大值")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" values "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" max "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" values"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])])}),[],!1,null,null,null);s.default=n.exports}}]);